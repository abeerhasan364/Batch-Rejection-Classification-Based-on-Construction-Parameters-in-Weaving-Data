{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5641929c-b9e6-464c-a92e-9889b69cf98e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Accuracy: 0.985\n",
      "Random Forest F1 Score: 0.989\n",
      "Random Forest AUC: 0.999\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1a1fe46a490>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, confusion_matrix\n",
    "import dash\n",
    "from dash import dcc, html\n",
    "from dash.dependencies import Input, Output\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "# ================================\n",
    "# 1. Load and preprocess the dataset\n",
    "# ================================\n",
    "df = pd.read_csv('full_weaving_dataset.csv')\n",
    "\n",
    "df = df[df['act_shrink%'] != 'na'].copy()\n",
    "df['act_shrink%'] = df['act_shrink%'].astype(float)\n",
    "df = df.dropna(subset=['Previous_pdn', 'Total_pdn_m/c'])\n",
    "\n",
    "df['Rejected'] = ((df['act_shrink%'] > 20) | (df['Rej_and_cut_Piece'] > df['Total_pdn_per_order']*0.10)).astype(int)",
    "df_batches = df[df['Previous_pdn'] == 'TOTAL'].copy()\n",
    "\n",
    "df_batches = df_batches.drop(columns=['ID', 'Previous_pdn', 'Rej_and_cut_Piece'])\n",
    "\n",
    "# ================================\n",
    "# 2. Feature Engineering\n",
    "# ================================\n",
    "df_batches['act_shrink%'] = df_batches['act_shrink%'].astype(float)\n",
    "\n",
    "month_dummies = pd.get_dummies(df_batches['Month'], prefix='Month')\n",
    "df_batches = pd.concat([df_batches, month_dummies], axis=1)\n",
    "df_batches = df_batches.drop(columns=['Month'])\n",
    "\n",
    "warp_dummies = pd.get_dummies(df_batches['warp_count'], prefix='warp')\n",
    "weft_dummies = pd.get_dummies(df_batches['weft_count'], prefix='weft')\n",
    "df_batches = pd.concat([df_batches, warp_dummies, weft_dummies], axis=1)\n",
    "df_batches = df_batches.drop(columns=['warp_count', 'weft_count'])\n",
    "\n",
    "const_dummies = pd.get_dummies(df_batches['Construction'], prefix='Const')\n",
    "df_batches = pd.concat([df_batches, const_dummies], axis=1)\n",
    "df_batches = df_batches.drop(columns=['Construction'])\n",
    "\n",
    "X = df_batches.drop(columns=['rejected'])\n",
    "y = df_batches['rejected']\n",
    "\n",
    "# ================================\n",
    "# 3. Model Training and Evaluation\n",
    "# ================================\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, stratify=y, random_state=42\n",
    ")\n",
    "\n",
    "rf = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "y_pred_rf = rf.predict(X_test)\n",
    "y_proba_rf = rf.predict_proba(X_test)[:, 1]\n",
    "\n",
    "print(\"Random Forest Accuracy: {:.3f}\".format(accuracy_score(y_test, y_pred_rf)))\n",
    "print(\"Random Forest F1 Score: {:.3f}\".format(f1_score(y_test, y_pred_rf)))\n",
    "print(\"Random Forest AUC: {:.3f}\".format(roc_auc_score(y_test, y_proba_rf)))\n",
    "\n",
    "# Retrain on full data for dashboard use\n",
    "rf.fit(X, y)\n",
    "df_batches_orig = df[df['Previous_pdn'] == 'TOTAL'].copy().reset_index(drop=True)\n",
    "df_batches_orig = df_batches_orig.drop(columns=['ID', 'Previous_pdn', 'Rej_and_cut_Piece'])\n",
    "\n",
    "# Preprocess again for prediction\n",
    "df_dash = df_batches_orig.copy()\n",
    "\n",
    "month_dummies = pd.get_dummies(df_dash['Month'], prefix='Month')\n",
    "warp_dummies = pd.get_dummies(df_dash['warp_count'], prefix='warp')\n",
    "weft_dummies = pd.get_dummies(df_dash['weft_count'], prefix='weft')\n",
    "const_dummies = pd.get_dummies(df_dash['Construction'], prefix='Const')\n",
    "\n",
    "df_dash_encoded = pd.concat([df_dash.drop(columns=['Month', 'warp_count', 'weft_count', 'Construction']),\n",
    "                             month_dummies, warp_dummies, weft_dummies, const_dummies], axis=1)\n",
    "\n",
    "# Align with training columns\n",
    "df_dash_encoded = df_dash_encoded.reindex(columns=X.columns, fill_value=0)\n",
    "\n",
    "# Predictions\n",
    "df_batches_orig['pred_proba'] = rf.predict_proba(df_dash_encoded)[:, 1]\n",
    "df_batches_orig['pred_rejected'] = rf.predict(df_dash_encoded)\n",
    "\n",
    "# ================================\n",
    "# 4. DASH DASHBOARD\n",
    "# ================================\n",
    "app = dash.Dash(__name__)\n",
    "server = app.server\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"Weaving Factory Batch Rejection Dashboard\"),\n",
    "    \n",
    "    html.Div([\n",
    "        html.Label(\"Filter by Month:\"),\n",
    "        dcc.Dropdown(\n",
    "            id='month-dropdown',\n",
    "            options=[{'label': m, 'value': m} for m in sorted(df_batches_orig['Month'].unique())],\n",
    "            value=sorted(df_batches_orig['Month'].unique()),\n",
    "            multi=True\n",
    "        ),\n",
    "        html.Label(\"Filter by Construction:\"),\n",
    "        dcc.Dropdown(\n",
    "            id='construction-dropdown',\n",
    "            options=[{'label': c, 'value': c} for c in sorted(df_batches_orig['Construction'].unique())],\n",
    "            value=sorted(df_batches_orig['Construction'].unique()),\n",
    "            multi=True\n",
    "        ),\n",
    "        html.Label(\"Prediction Threshold:\"),\n",
    "        dcc.Slider(\n",
    "            id='threshold-slider',\n",
    "            min=0, max=1, step=0.01, value=0.5,\n",
    "            marks={0: '0', 0.5: '0.5', 1: '1'}\n",
    "        )\n",
    "    ], style={'width': '45%', 'display': 'inline-block', 'padding': '20px'}),\n",
    "\n",
    "    html.Div([\n",
    "        dcc.Graph(id='rejection-bar-chart'),\n",
    "        dcc.Graph(id='confusion-matrix')\n",
    "    ])\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    [Output('rejection-bar-chart', 'figure'),\n",
    "     Output('confusion-matrix', 'figure')],\n",
    "    [Input('month-dropdown', 'value'),\n",
    "     Input('construction-dropdown', 'value'),\n",
    "     Input('threshold-slider', 'value')]\n",
    ")\n",
    "def update_dashboard(selected_months, selected_constructions, threshold):\n",
    "    filtered_df = df_batches_orig[\n",
    "        df_batches_orig['Month'].isin(selected_months) & \n",
    "        df_batches_orig['Construction'].isin(selected_constructions)\n",
    "    ].copy()\n",
    "    \n",
    "    filtered_df['pred_label'] = (filtered_df['pred_proba'] >= threshold).astype(int)\n",
    "\n",
    "    # Bar chart\n",
    "    bar_fig = px.histogram(\n",
    "        filtered_df, x='Month', color='pred_label',\n",
    "        barmode='group', title='Predicted Rejections by Month',\n",
    "        labels={'pred_label': 'Predicted Rejection'}\n",
    "    )\n",
    "\n",
    "    # Confusion matrix\n",
    "    actual = filtered_df['rejected']\n",
    "    pred = filtered_df['pred_label']\n",
    "    cm = pd.DataFrame(\n",
    "        confusion_matrix(actual, pred),\n",
    "        index=['Actual: No', 'Actual: Yes'],\n",
    "        columns=['Predicted: No', 'Predicted: Yes']\n",
    "    )\n",
    "\n",
    "    cm_fig = go.Figure(data=go.Heatmap(\n",
    "        z=cm.values,\n",
    "        x=cm.columns,\n",
    "        y=cm.index,\n",
    "        colorscale='Blues',\n",
    "        text=cm.values,\n",
    "        texttemplate=\"%{text}\"\n",
    "    ))\n",
    "    cm_fig.update_layout(title='Confusion Matrix')\n",
    "\n",
    "    return bar_fig, cm_fig\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "5dca6d70-475d-4d24-8f9c-87c20d9d027e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
